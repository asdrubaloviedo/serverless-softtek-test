service: api

# Ejecuta el workflow en cualquier push o pull request a la rama principal
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:us-east-1:471112938813:table/SofttekTable
        - Effect: Allow
          Action:
            - 'apigateway:GET'
            - 'apigateway:GETExport'   # Permiso adicional para obetenr la doc del swagger
        Resource: arn:aws:apigateway:us-east-1::/restapis/tarpy1226l/stages/dev/*
        # Resource: '*'

plugins:
  # Genera automáticamente un archivo Swagger para documentar las API.
  - serverless-auto-swagger
  # Permite ejecutar el servicio localmente, simulando el comportamiento de AWS.
  - serverless-offline

custom:
  # Configura el plugin serverless-auto-swagger
  autoswagger:
    # Define la base path de la API.
    basePath: '/dev'
    # El título del archivo Swagger.
    title: 'Softtek technical test'
    # Tipo de API, en este caso HTTP.
    apiType: 'http'
    # Archivos de tipos TypeScript para Swagger.
    typefiles: ['./types/api-types.d.ts']

# Controla cómo se empaqueta el servicio
package:
  # Cada función se empaqueta individualmente en lugar de hacerlo como un paquete global
  individually: true
  # Define los archivos o carpetas que se excluirán del empaquetado
  patterns:
    - '!*.zip'
    - '!node_modules/**'

functions:
  search:
    handler: functions/person/search/handler.search
    package:
      # Incluye solo los archivos necesarios para esta función
      patterns:
        - 'functions/person/search/handler.js'
        - 'utils/*.js'
    # Se utiliza una capa Lambda para compartir dependencias comunes
    layers:
      - !Ref BaseLambdaLayer
    events:
      - http:
          path: search
          method: GET
          request:
            parameters:
              queryStringParameters:
                search:
                  required: true
                  type: string
                  description: 'Nombre a filtrar'
          responseData:
            200:
              description: 'Datos formateados de una persona'
              bodyType: Person
          cors: true

  save:
    handler: functions/person/save/handler.save
    package:
      # Incluye solo los archivos necesarios para esta función
      patterns:
        - 'functions/person/save/handler.js'
        - 'utils/*.js'
    # Se utiliza una capa Lambda para compartir dependencias comunes
    layers:
      - !Ref BaseLambdaLayer
    events:
      - http:
          path: person
          method: POST
          request:
            #  Define un esquema de validación para las solicitudes usando un archivo JSON.
            schemas:
              application/json: ${file(schemas/personSchema.json)}
          cors: true
          bodyType: Person

  getPerson:
    handler: functions/person/get/handler.get
    package:
      # Incluye solo los archivos necesarios para esta función
      patterns:
        - 'functions/person/get/handler.js'
        - 'utils/*.js'
    # Se utiliza una capa Lambda para compartir dependencias comunes
    layers:
      - !Ref BaseLambdaLayer
    events:
      - http:
          path: person/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
          cors: true
          reponse:
            200:
              description: 'success'
  # Función para servir la documentación Swagger en el endpoint /api-docs
  swagger:
    handler: swagger-res/index.handler
    package:
      # Incluye solo los archivos necesarios para esta función
      patterns:
        - 'swagger/index.js'
        - 'utils/*.js'
    # Se utiliza una capa Lambda para compartir dependencias comunes
    layers:
      - !Ref BaseLambdaLayer
    events:
      - http:
          path: api-docs
          method: GET
          cors: true

# Define una capa Lambda reutilizable con las dependencias Node.js comunes. Mejora la eficiencia del despliegue.
layers:
  base:
    name: prd-dependencies
    description: layer for nodejs prd dependencies
    licenseInfo: MIT
    compatibleRuntimes:
      - nodejs18.x
    compatibleArchitectures:
      - x86_64
    package:
      artifact: nodejs-layer.zip

resources:
  Resources:
    SofttekTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SofttekTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
